name: Update NextDNS Rewrites

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight (UTC)
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  update-rewrites:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Using the latest version

      - name: Query IP addresses and update DNS rewrites
        env:
          NEXTDNS_PROFILE_ID: ${{ secrets.NEXTDNS_PROFILE_ID }}
          NEXTDNS_API_KEY: ${{ secrets.NEXTDNS_API_KEY }}
        run: |
          DOMAINS=("archive.today" "archive.ph" "archive.is")
          DNS_SERVER="1.1.1.1"

          update_dns_rewrite() {
              local domain=$1
              local ip_addresses=$2

              echo "Checking for existing rewrite entries for ${domain}"

              # Fetch existing rewrites
              existing_rewrites=$(curl -s -X GET "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites" \
                -H "x-api-key: ${NEXTDNS_API_KEY}")
              
              echo "Existing rewrites response: $existing_rewrites"

              # Extract all matching entries for the domain
              matching_entries=$(echo "$existing_rewrites" | jq -c ".data[] | select(.name == \"${domain}\")")
              
              if [[ -z "$matching_entries" ]]; then
                  echo "No existing rewrites found for ${domain}"
              fi

              update_needed=false

              # Iterate over each matching entry
              echo "$matching_entries" | while IFS= read -r entry; do
                  entry_id=$(echo "$entry" | jq -r ".id")
                  existing_ip=$(echo "$entry" | jq -r ".content")

                  echo "Processing existing rewrite ID: $entry_id with IP: $existing_ip for domain: ${domain}"

                  # Check if this IP is still valid for the domain
                  if [[ " ${ip_addresses[@]} " =~ " ${existing_ip} " ]]; then
                      echo "No change needed for ${domain}, rewrite with ID $entry_id already has valid IP ${existing_ip}"
                      ip_addresses=("${ip_addresses[@]/$existing_ip}")  # Remove the matched IP from the list
                  else
                      echo "Deleting outdated rewrite for ${domain} with ID ${entry_id}"
                      delete_response=$(curl -sv -X DELETE "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites/${entry_id}" \
                        -H "x-api-key: ${NEXTDNS_API_KEY}" 2>&1)

                      echo "Delete response: $delete_response"

                      if [[ "$delete_response" == *"error"* ]] || [[ -z "$delete_response" ]]; then
                          echo "Error deleting rewrite for ${domain} with ID ${entry_id}: $delete_response"
                          exit 1
                      fi
                      echo "Successfully deleted rewrite for ${domain} with ID ${entry_id}"
                      update_needed=true
                  fi
              done

              # Add any remaining IP addresses as rewrites
              for new_ip in "${ip_addresses[@]}"; do
                  if [[ -n "$new_ip" ]]; then
                      echo "Creating/Updating rewrite for ${domain} with IP ${new_ip}"
                      response=$(curl -sv -X POST "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites" \
                        -H "x-api-key: ${NEXTDNS_API_KEY}" \
                        -H "Content-Type: application/json" \
                        -d "{\"name\":\"${domain}\",\"content\":\"${new_ip}\"}" 2>&1)

                      echo "POST response: $response"

                      # Check if the response contains errors
                      if echo "$response" | jq -e '.errors' > /dev/null; then
                          echo "Error creating/updating rewrite for ${domain}: $response"
                          exit 1
                      fi

                      echo "Successfully created/updated rewrite for ${domain} with IP ${new_ip}"
                  fi
              done
          }

          # Query DNS server and update rewrites
          for domain in "${DOMAINS[@]}"; do
              echo "Querying IP addresses for ${domain}"
              ip_addresses=($(dig +short "${domain}" @"${DNS_SERVER}"))
              
              echo "Found IP addresses for ${domain}: ${ip_addresses[*]}"

              if [[ ${#ip_addresses[@]} -gt 0 ]]; then
                  update_dns_rewrite "${domain}" "${ip_addresses[@]}"
              else
                  echo "No IP addresses found for ${domain} on ${DNS_SERVER}"
              fi
          done
