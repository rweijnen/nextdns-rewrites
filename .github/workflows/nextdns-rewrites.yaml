name: Update NextDNS Rewrites

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight (UTC)
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  update-rewrites:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Using the latest version

      - name: Query IP addresses and update DNS rewrites
        env:
          NEXTDNS_PROFILE_ID: ${{ secrets.NEXTDNS_PROFILE_ID }}
          NEXTDNS_API_KEY: ${{ secrets.NEXTDNS_API_KEY }}
        run: |
          DOMAINS=("archive.today" "archive.ph" "archive.is")
          DNS_SERVER="1.1.1.1"

          # Fetch all existing rewrites once
          echo "Fetching all existing rewrites"
          existing_rewrites=$(curl -s -X GET "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites" \
            -H "x-api-key: ${NEXTDNS_API_KEY}")
          echo "Fetched rewrites: $existing_rewrites"

          update_dns_rewrite() {
              local domain=$1
              shift
              local ip_addresses=("$@")

              echo "Checking for existing rewrite entries for ${domain}"

              # Extract all matching entries for the domain from the pre-fetched rewrite list
              matching_entries=$(echo "$existing_rewrites" | jq -c ".data[] | select(.name == \"${domain}\")")
              
              if [[ -z "$matching_entries" ]]; then
                  echo "No existing rewrites found for ${domain}"
              fi

              # Track existing IPs for the domain
              declare -A existing_ips
              echo "$matching_entries" | while IFS= read -r entry; do
                  entry_id=$(echo "$entry" | jq -r ".id")
                  existing_ip=$(echo "$entry" | jq -r ".content")

                  echo "Processing existing rewrite ID: $entry_id with IP: $existing_ip for domain: ${domain}"
                  existing_ips["$existing_ip"]=$entry_id

                  # Remove matched IPs from the new IP addresses array
                  if [[ " ${ip_addresses[@]} " =~ " ${existing_ip} " ]]; then
                      echo "No change needed for ${domain}, rewrite with ID $entry_id already has valid IP ${existing_ip}"
                      ip_addresses=("${ip_addresses[@]/$existing_ip}")  # Remove matched IP from the list
                  else
                      if [[ -n "$entry_id" && "$entry_id" != "null" ]]; then
                          echo "Deleting outdated rewrite for ${domain} with ID ${entry_id}"
                          delete_response=$(curl -s -X DELETE "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites/${entry_id}" \
                            -H "x-api-key: ${NEXTDNS_API_KEY}")

                          if [[ "$delete_response" == "" ]]; then
                              echo "Successfully deleted rewrite for ${domain} with ID ${entry_id}"
                          else
                              echo "Error deleting rewrite for ${domain} with ID ${entry_id}: $delete_response"
                              exit 1
                          fi
                      fi
                  fi
              done

              # If all IPs are already matched, return early
              if [[ ${#ip_addresses[@]} -eq 0 ]]; then
                  echo "All IP addresses for ${domain} are already up-to-date. Skipping rewrite creation."
                  return  # Exit early as all entries are correct
              fi

              # Add any remaining IP addresses as rewrites
              for new_ip in "${ip_addresses[@]}"; do
                  if [[ -n "${existing_ips[$new_ip]}" ]]; then
                      echo "Skipping creation as IP ${new_ip} for domain ${domain} already exists."
                      continue
                  fi

                  echo "Creating/Updating rewrite for ${domain} with IP ${new_ip}"
                  response=$(curl -s -X POST "https://api.nextdns.io/profiles/${NEXTDNS_PROFILE_ID}/rewrites" \
                    -H "x-api-key: ${NEXTDNS_API_KEY}" \
                    -H "Content-Type: application/json" \
                    -d "{\"name\":\"${domain}\",\"content\":\"${new_ip}\"}")

                  echo "POST response: $response"

                  # Check if the response contains errors
                  if echo "$response" | jq -e '.errors' > /dev/null; then
                      echo "Error creating/updating rewrite for ${domain}: $response"
                      exit 1
                  fi

                  echo "Successfully created/updated rewrite for ${domain} with IP ${new_ip}"
              done
          }

          # Query DNS server and update rewrites
          for domain in "${DOMAINS[@]}"; do
              echo "Querying IP addresses for ${domain}"
              
              # Capture the full dig output for both A and AAAA records
              dig_output=$(dig +short "${domain}" A @"${DNS_SERVER}")
              dig_output_ipv6=$(dig +short "${domain}" AAAA @"${DNS_SERVER}")

              # Combine both IPv4 and IPv6 results
              full_output="${dig_output}\n${dig_output_ipv6}"
              echo "Full dig output for ${domain}:\n$full_output"
              
              # Extract just the IP addresses (IPv4 or IPv6) from the combined output
              ip_addresses=($(echo -e "$full_output" | grep -E '^[0-9.]+$|^[0-9a-fA-F:]+$'))

              echo "Found IP addresses for ${domain}: ${ip_addresses[*]}"

              if [[ ${#ip_addresses[@]} -gt 0 ]]; then
                  update_dns_rewrite "${domain}" "${ip_addresses[@]}"
              else
                  echo "No IP addresses found for ${domain} on ${DNS_SERVER}"
              fi
          done
